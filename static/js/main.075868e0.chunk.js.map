{"version":3,"sources":["components/home/home.component.js","components/options/options.component.js","components/results/results.component.js","components/snapshot/camera.js","components/snapshot/snapshot.component.js","components/upload/computervision.js","components/upload/upload.component.js","components/enterURL/computervision.js","components/enterURL/enterURL.component.js","App.js","reportWebVitals.js","index.js"],"names":["home","props","state","this","setState","id","class","data-bs-ride","src","alt","style","backgroundImage","href","Component","options","results","camera","width","height","createObjects","video","document","createElement","autoplay","body","appendChild","canvas","context","startCamera","w","h","navigator","mediaDevices","getUserMedia","getElementById","getContext","then","stream","srcObject","play","console","log","takeSnapshot","drawImage","snapshot","formAction","key","process","endpoint","visualFeatures","includesText","tags","a","filter","el","name","toLowerCase","includesHandwriting","wait","timeout","Promise","resolve","setTimeout","computerVision","url","computerVisionClient","ComputerVisionClient","ApiKeyCredentials","inHeader","urlToAnalyze","analyzeImage","analysis","readTextFromURL","text","client","read","result","operationID","operationLocation","split","slice","start","Date","now","status","getReadResult","analyzeResult","upload","fs","require","uploadFunc","file","readFile","path","err","data","s3bucket","AWS","S3","params","Bucket","createBucket","Key","originalFilename","Body","unlink","error","processUpload","e","fileSelected","onFileUrlEntered","processing","item","PrettyPrintJson","JSON","stringify","DisplayResults","URL","border","description","captions","Analyze","CantAnalyze","Render","length","ComputerVisionIsConfigured","handleChange","event","target","files","uploads","hasOwnProperty","dynamicImageURL","createObjectURL","push","patterns","documents","className","type","onChange","map","value","index","onClick","EnterURL","useState","setFileSelected","setAnalysis","setProcessing","parsed","placeholder","size","App","component","enterURL","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.075868e0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nconst background = \"https://mdbootstrap.com/img/Photos/Horizontal/Nature/full%20page/img%20%283%29.jpg\";\r\n\r\nconst home = class home extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={};\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.setState({})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div id=\"carouselExampleSlidesOnly\" class=\"carousel slide\" data-bs-ride=\"carousel\">\r\n                    <div class=\"carousel-inner\">\r\n                        <div class=\"carousel-item active\">\r\n                            <img src=\"https://picsum.photos/1000/250\" class=\"d-block w-100\" alt=\"...\"/>\r\n                        </div>\r\n                        <div class=\"carousel-item\">\r\n                            <img src=\"https://picsum.photos/1000/250\" class=\"d-block w-100\" alt=\"...\"/>\r\n                        </div>\r\n                        <div class=\"carousel-item\">\r\n                            <img src=\"https://picsum.photos/1000/250\" class=\"d-block w-100\" alt=\"...\"/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"card text-center\" style={{ backgroundImage: 'url(${background})' }}>\r\n                    <div class=\"card-body\">\r\n                        <h2 class=\"card-title\">AI Check Reader</h2>\r\n                        <p class=\"card-text\">Submit your check for validation</p>\r\n                        <a href=\"/get-started\" class=\"btn btn-primary\">Begin New Transaction</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default home;","import React, {Component} from 'react';\r\n\r\nconst options = class options extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={};\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.setState({})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <br></br><br></br>\r\n                <a href=\"/upload\" class=\"btn btn-outline-primary\">Upload file</a>\r\n                <a href=\"/enterURL\" class=\"btn btn-outline-success\">Enter Image URL</a>\r\n                <a href=\"/snapshot\" class=\"btn btn-outline-info\">Take Snapshot (under development)</a>\r\n                <br></br>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default options;","import React, {Component} from 'react';\r\n\r\nconst results = class results extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={};\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.setState({})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <br></br><br></br>\r\n                <div class=\"card\" >\r\n                    <p class=\"card-header\">Here's your validated check details</p>\r\n                    <ul class=\"list-group list-group-flush\">\r\n                        <li class=\"list-group-item\">Name: Rahmana Muhammed</li>\r\n                        <li class=\"list-group-item\">Amount: $ 1 000 000 </li>\r\n                        <li class=\"list-group-item\">Date: March 9, 2021</li>\r\n                    </ul>\r\n                </div>\r\n                <br></br>\r\n                <a href=\"/\" class=\"btn btn-warning\">Start Over</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default results;","import 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst camera = function () {\r\n    let width = 0;\r\n    let height = 0;\r\n    \r\n    const createObjects = function () {\r\n    \r\n    \r\n        const video = document.createElement('video');\r\n        video.id = 'video';\r\n        video.width = width;\r\n        video.width = height;\r\n        video.autoplay = true;\r\n        document.body.appendChild(video);\r\n    \r\n        const canvas = document.createElement('canvas');\r\n        canvas.id = 'canvas';\r\n        canvas.width = width;\r\n        canvas.width = height;\r\n        document.body.appendChild(canvas);\r\n    }\r\n    \r\n    \r\n    return {\r\n        video: null,\r\n        context: null,\r\n        canvas: null,\r\n    \r\n        startCamera: function (w = 680, h = 480) {\r\n            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n                width = w;\r\n                height = h;\r\n    \r\n                createObjects();\r\n    \r\n                this.video = document.getElementById('video');\r\n                this.canvas = document.getElementById('canvas');\r\n                this.context = this.canvas.getContext('2d');\r\n    \r\n    \r\n                (function (video) {\r\n                    navigator.mediaDevices.getUserMedia({video: true}).then(function (stream) {\r\n                        video.srcObject = stream;\r\n                        video.play();\r\n                    });\r\n                })(this.video)   \r\n                console.log(\"Started camera\");\r\n            }\r\n        },\r\n    \r\n        takeSnapshot: function () {\r\n            this.context.drawImage(this.video, 0, 0, width, height);\r\n        }\r\n    }\r\n    }();\r\n    \r\n    export default camera;","import React, {Component} from 'react';\r\nimport \"./snapshot.css\"\r\nimport camera from './camera.js';\r\n\r\nconst snapshot = class snapshot extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={};\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.setState({})\r\n    }\r\n\r\n    render(){\r\n        camera.startCamera();\r\n        \r\n        return (\r\n            <div id=\"canvasContainer\">\r\n                <br></br><br></br>\r\n                <br></br>\r\n                <a href=\"/results\" class=\"btn btn-success\">Submit</a>\r\n                <button class=\"btn btn-secondary\" formAction=\"camera.takeSnapshot()\">Capture</button>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default snapshot;","// ./src/azure-cognitiveservices-computervision.js\r\n\r\n// Azure SDK client libraries\r\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\r\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\r\n\r\n// List of sample images to use in demo\r\n// import RandomImageUrl from './DefaultImages';\r\n\r\n// Authentication requirements\r\nconst key = process.env.REACT_APP_COMPUTERVISIONKEY;\r\nconst endpoint = process.env.REACT_APP_COMPUTERVISIONENDPOINT;\r\n\r\nconsole.log(`key = ${key}`)\r\nconsole.log(`endpoint = ${endpoint}`)\r\n\r\n// Cognitive service features\r\nconst visualFeatures = [\r\n    \"ImageType\",\r\n    \"Faces\",\r\n    \"Adult\",\r\n    \"Categories\",\r\n    \"Color\",\r\n    \"Tags\",\r\n    \"Description\",\r\n    \"Objects\",\r\n    \"Brands\"\r\n];\r\n\r\nexport const isConfigured = () => {\r\n    const result = (key && endpoint && (key.length > 0) && (endpoint.length > 0)) ? true : false;\r\n    console.log(`key = ${key}`)\r\n    console.log(`endpoint = ${endpoint}`)\r\n    console.log(`ComputerVision isConfigured = ${result}`)\r\n    return result;\r\n}\r\n\r\n// Computer Vision detected Printed Text\r\nconst includesText = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"text\";\r\n    });\r\n}\r\n// Computer Vision detected Handwriting\r\nconst includesHandwriting = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"handwriting\";\r\n    });\r\n}\r\n// Wait for text detection to succeed\r\nconst wait = (timeout) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, timeout);\r\n    });\r\n}\r\n\r\n// Analyze Image from URL\r\nexport const computerVision = async (url) => {\r\n\r\n    // authenticate to Azure service\r\n    const computerVisionClient = new ComputerVisionClient(\r\n        new ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint);\r\n\r\n    // get image URL - entered in form or random from Default Images\r\n    const urlToAnalyze = url //|| RandomImageUrl();\r\n    \r\n    // analyze image\r\n    const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, { visualFeatures });\r\n\r\n    // text detected - what does it say and where is it\r\n    if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\r\n        analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze);\r\n    }\r\n\r\n    // all information about image\r\n    return { \"URL\": urlToAnalyze, ...analysis};\r\n}\r\n// analyze text in image\r\nconst readTextFromURL = async (client, url) => {\r\n    \r\n    let result = await client.read(url);\r\n    let operationID = result.operationLocation.split('/').slice(-1)[0];\r\n\r\n    // Wait for read recognition to complete\r\n    // result.status is initially undefined, since it's the result of read\r\n    const start = Date.now();\r\n    console.log(`${start} -${result?.status} `);\r\n    \r\n    while (result.status !== \"succeeded\") {\r\n        await wait(500);\r\n        console.log(`${Date.now() - start} -${result?.status} `);\r\n        result = await client.getReadResult(operationID);\r\n    }\r\n    \r\n    // Return the first page of result. \r\n    // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\r\n    return result.analyzeResult; \r\n}","import { computerVision, isConfigured as ComputerVisionIsConfigured } from './computervision';\r\nimport React, {Component} from 'react';\r\nimport AWS from 'aws-sdk';\r\nimport fs from 'fs';\r\n\r\n\r\nvar upload = class upload extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            uploads: [],\r\n            patterns: [],\r\n            documents: [],\r\n            fileSelected: null,\r\n            analysis: null,\r\n            processing: false\r\n          };\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.setState({})\r\n    }\r\n\r\n    fs = require('fs');\r\n    uploadFunc = function (file) {\r\n    fs.readFile(file.path, function (err, data) {\r\n        if (err) throw err; // Something went wrong!\r\n        var s3bucket = new AWS.S3({params: {Bucket: 'checkreaderbucket'}});\r\n        s3bucket.createBucket(function () {\r\n            var params = {\r\n                Key: file.originalFilename,\r\n                Body: data\r\n            };\r\n            s3bucket.upload(params, function (err, data) {\r\n                // Whether there is an error or not, delete the temp file\r\n                fs.unlink(file.path, function (err) {\r\n                    if (err) {\r\n                        console.error(err);\r\n                    }\r\n                    console.log('Temp File Delete');\r\n                });\r\n\r\n                console.log(\"PRINT FILE:\", file);\r\n                if (err) {\r\n                    console.log('ERROR MSG: ', err);\r\n                } else {\r\n                    console.log('Successfully uploaded data');\r\n\r\n                }\r\n            });\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n\r\n   processUpload = (e) => {\r\n    this.setState({\r\n        fileSelected: e\r\n      })\r\n  }\r\n\r\n  onFileUrlEntered = (e) => {\r\n\r\n    // hold UI\r\n    this.setState({\r\n        processing: true,\r\n        analysis: null\r\n      })\r\n\r\n    computerVision(this.state.fileSelected || null).then((item) => {\r\n      // reset state/form\r\n      this.setState({\r\n        analysis: item,\r\n        fileSelected: \"\",\r\n        processing: false\r\n      })\r\n    });\r\n\r\n  };\r\n\r\n    // Display JSON data in readable format\r\n    PrettyPrintJson = (data) => {\r\n      return (<div><pre>{JSON.stringify(data, null, 2)}</pre></div>);\r\n    }\r\n  \r\n    DisplayResults = () => {\r\n      return (\r\n        <div>\r\n          <h2>Computer Vision Analysis</h2>\r\n          <div><img src={this.state.analysis.URL} height=\"200\" border=\"1\" alt={(this.state.analysis.description && this.state.analysis.description.captions && this.state.analysis.description.captions[0].text ? this.state.analysis.description.captions[0].text : \"can't find caption\")} /></div>\r\n          {this.PrettyPrintJson(this.state.analysis)}\r\n        </div>\r\n      )\r\n    };\r\n\r\n    Analyze = () => {\r\n      return (\r\n      <div>\r\n        {!this.state.processing}\r\n        {this.state.processing && <div>Processing</div>}\r\n        <hr />\r\n        {this.state.analysis && this.DisplayResults()}\r\n        </div>\r\n      )\r\n    }\r\n    \r\n     CantAnalyze = () => {\r\n      return (\r\n        <div>Key and/or endpoint not configured in ./azure-cognitiveservices-computervision.js</div>\r\n      )\r\n    }\r\n    Render = () => {\r\n      var ready = ComputerVisionIsConfigured();\r\n      if (ready) {\r\n        return <this.Analyze />;\r\n      }\r\n      return <this.CantAnalyze />;\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        if (event.target.files[0]) {\r\n          var uploads = []\r\n          for (var key in event.target.files) {\r\n            if (!event.target.files.hasOwnProperty(key)) continue;\r\n            let upload = event.target.files[key]\r\n            //this.uploadFunc(upload);\r\n            let dynamicImageURL = URL.createObjectURL(upload);\r\n\r\n            this.processUpload(dynamicImageURL.slice(5,));\r\n            uploads.push(dynamicImageURL);\r\n          }\r\n          this.setState({\r\n            uploads: uploads\r\n          })\r\n        } else {\r\n          this.setState({\r\n            uploads: []\r\n          })\r\n        }\r\n      }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <br></br><br></br>\r\n                <div>\r\n                {this.Render()}\r\n                </div>\r\n            \r\n            <br></br><br></br>\r\n            { /* File uploader */ }\r\n            <section className=\"hero\">\r\n                <label className=\"fileUploaderContainer\">\r\n                    Click here to upload documents\r\n                    <input type=\"file\" id=\"fileUploader\" onChange={this.handleChange} />\r\n                </label>\r\n\r\n                <div>\r\n                    { this.state.uploads.map((value, index) => {\r\n                        return <img key={index} src={value} width=\"400px\" alt=\"upload\"/>\r\n                    })}\r\n                </div>\r\n                <br></br><br></br>\r\n                <button onClick={this.onFileUrlEntered} class=\"btn btn-success\">Generate</button>\r\n\r\n            </section>\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default upload;\r\n\r\n","// ./src/azure-cognitiveservices-computervision.js\r\n\r\n// Azure SDK client libraries\r\nimport { ComputerVisionClient } from '@azure/cognitiveservices-computervision';\r\nimport { ApiKeyCredentials } from '@azure/ms-rest-js';\r\n\r\n// List of sample images to use in demo\r\n// import RandomImageUrl from './DefaultImages';\r\n\r\n// Authentication requirements\r\nconst key = process.env.REACT_APP_COMPUTERVISIONKEY;\r\nconst endpoint = process.env.REACT_APP_COMPUTERVISIONENDPOINT;\r\n\r\nconsole.log(`key = ${key}`)\r\nconsole.log(`endpoint = ${endpoint}`)\r\n\r\n// Cognitive service features\r\nconst visualFeatures = [\r\n    \"ImageType\",\r\n    \"Faces\",\r\n    \"Adult\",\r\n    \"Categories\",\r\n    \"Color\",\r\n    \"Tags\",\r\n    \"Description\",\r\n    \"Objects\",\r\n    \"Brands\"\r\n];\r\n\r\nexport const isConfigured = () => {\r\n    const result = (key && endpoint && (key.length > 0) && (endpoint.length > 0)) ? true : false;\r\n    console.log(`key = ${key}`)\r\n    console.log(`endpoint = ${endpoint}`)\r\n    console.log(`ComputerVision isConfigured = ${result}`)\r\n    return result;\r\n}\r\n\r\n// Computer Vision detected Printed Text\r\nconst includesText = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"text\";\r\n    });\r\n}\r\n// Computer Vision detected Handwriting\r\nconst includesHandwriting = async (tags) => {\r\n    return tags.filter((el) => {\r\n        return el.name.toLowerCase() === \"handwriting\";\r\n    });\r\n}\r\n// Wait for text detection to succeed\r\nconst wait = (timeout) => {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, timeout);\r\n    });\r\n}\r\n\r\n// Analyze Image from URL\r\nexport const computerVision = async (url) => {\r\n\r\n    // authenticate to Azure service\r\n    const computerVisionClient = new ComputerVisionClient(\r\n        new ApiKeyCredentials({ inHeader: { 'Ocp-Apim-Subscription-Key': key } }), endpoint);\r\n\r\n    // get image URL - entered in form or random from Default Images\r\n    const urlToAnalyze = url //|| RandomImageUrl();\r\n    \r\n    // analyze image\r\n    const analysis = await computerVisionClient.analyzeImage(urlToAnalyze, { visualFeatures });\r\n\r\n    // text detected - what does it say and where is it\r\n    if (includesText(analysis.tags) || includesHandwriting(analysis.tags)) {\r\n        analysis.text = await readTextFromURL(computerVisionClient, urlToAnalyze);\r\n    }\r\n\r\n    // all information about image\r\n    return { \"URL\": urlToAnalyze, ...analysis};\r\n}\r\n// analyze text in image\r\nconst readTextFromURL = async (client, url) => {\r\n    \r\n    let result = await client.read(url);\r\n    let operationID = result.operationLocation.split('/').slice(-1)[0];\r\n\r\n    // Wait for read recognition to complete\r\n    // result.status is initially undefined, since it's the result of read\r\n    const start = Date.now();\r\n    console.log(`${start} -${result?.status} `);\r\n    \r\n    while (result.status !== \"succeeded\") {\r\n        await wait(500);\r\n        console.log(`${Date.now() - start} -${result?.status} `);\r\n        result = await client.getReadResult(operationID);\r\n    }\r\n    \r\n    // Return the first page of result. \r\n    // Replace[0] with the desired page if this is a multi-page file such as .pdf or.tiff.\r\n    return result.analyzeResult; \r\n}","import React, { useState } from 'react';\r\nimport { computerVision, isConfigured as ComputerVisionIsConfigured } from './computervision';\r\n\r\nfunction EnterURL() {\r\n  const [fileSelected, setFileSelected] = useState(null);\r\n  const [analysis, setAnalysis] = useState(null);\r\n  const [processing, setProcessing] = useState(false);\r\n\r\n  const handleChange = (e) => {\r\n    setFileSelected(e.target.value)\r\n  }\r\n\r\n  const onFileUrlEntered = (e) => {\r\n\r\n    // hold UI\r\n    setProcessing(true);\r\n    setAnalysis(null);\r\n\r\n    computerVision(fileSelected || null).then((item) => {\r\n      // reset state/form\r\n      setAnalysis(item);\r\n      setFileSelected(\"\");\r\n      setProcessing(false);\r\n    });\r\n\r\n  };\r\n\r\n    // Display JSON data in readable format\r\n    const PrettyPrintJson = (data) => {\r\n        let parsed = [];\r\n        for  (var item in data.text[\"readResults\"][0][\"lines\"]){\r\n            parsed.push(data[\"text\"][\"readResults\"][0][\"lines\"][item].text)\r\n        }\r\n\r\n      return (<div><pre>{parsed.map((value) =>{\r\n          return value + \"\\n\"\r\n      })}</pre></div>);\r\n    }\r\n  \r\n    const DisplayResults = () => {\r\n      return (\r\n        <div>\r\n          <h3>Check Scan Results</h3>\r\n          <div><img src={analysis.URL} height=\"200\" border=\"1\" alt={(analysis.description && analysis.description.captions && analysis.description.captions[0].text ? analysis.description.captions[0].text : \"can't find caption\")} /></div>\r\n          {PrettyPrintJson(analysis)}\r\n        </div>\r\n      )\r\n    };\r\n\r\n    const Analyze = () => {\r\n      return (\r\n      <div>\r\n        <p>Analyze image from URL</p>\r\n        {!processing &&\r\n          <div>\r\n            <div>\r\n              <label>URL</label>\r\n              <input type=\"text\" placeholder=\"Enter URL or leave empty for random image from collection\" size=\"50\" onChange={handleChange}></input>\r\n            </div>\r\n            <button class=\"btn btn-outline-success\" onClick={onFileUrlEntered}>Analyze</button>\r\n          </div>\r\n        }\r\n        {processing && <div>Processing</div>}\r\n        <hr />\r\n        {analysis && DisplayResults()}\r\n        </div>\r\n      )\r\n    }\r\n    \r\n    const CantAnalyze = () => {\r\n      return (\r\n        <div>Key and/or endpoint not configured in ./azure-cognitiveservices-computervision.js</div>\r\n      )\r\n    }\r\n    function Render() {\r\n      const ready = ComputerVisionIsConfigured();\r\n      if (ready) {\r\n        return <Analyze />;\r\n      }\r\n      return <CantAnalyze />;\r\n    }\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        {Render()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EnterURL;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport {BrowserRouter as Router, Route} from \"react-router-dom\"\r\n\r\nimport home from \"./components/home/home.component\";\r\nimport options from \"./components/options/options.component\";\r\nimport results from \"./components/results/results.component\";\r\nimport snapshot from \"./components/snapshot/snapshot.component\";\r\nimport upload from \"./components/upload/upload.component\";\r\nimport enterURL from \"./components/enterURL/enterURL.component\";\r\n\r\n\r\nfunction App() {\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Route path=\"/\" component={home} />\r\n        <Route path=\"/get-started\" component={options}/>\r\n        <Route path=\"/snapshot\" component={snapshot}/>\r\n        <Route path=\"/upload\" component={upload}/>\r\n        <Route path=\"/results\" component={results}/>\r\n        <Route path=\"/enterURL\" component={enterURL}/>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}